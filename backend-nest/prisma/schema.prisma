generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(uuid())
    email     String   @unique
    password  String
    name      String
    address   String
    phone     String
    zipcode   String?  @default("")
    isAdmin   Boolean?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    orders    Order[]
    cart      Cart?
    cartId    String?
}

model Delivery {
    id             String   @id @default(uuid())
    title          String
    initialPrice   Float
    priceToAddress Float
    image          String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

model Product {
    id                  String                @id @default(uuid())
    title               String
    price               Float
    description         String
    image               String
    rating              Rating?
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @updatedAt
    carts               Cart[]
    orders              Order[]
    translations        ProductTranslation[]
    categoryTranslation CategoryTranslation[]
}

model ProductTranslation {
    id          String  @id @default(uuid())
    title       String
    description String
    lang        String
    product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId   String

    @@unique([productId, lang])
}

model Rating {
    id        String   @id @default(uuid())
    rate      Float    @default(0)
    count     Int      @default(0)
    product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String   @unique
}

model Cart {
    id         String    @id @default(uuid())
    totalPrice Float?    @default(0)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    products   Product[]
    user       User?     @relation(fields: [userId], references: [id])
    userId     String?   @unique
}

model Order {
    id              String    @id @default(uuid())
    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String
    orderStatus     String    @default("Pending")
    selectedCourier String
    productsPrice   Float     @default(0)
    deliveryPrice   Float     @default(0)
    products        Product[]
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model Category {
    id           String                @id @default(uuid())
    title        String
    bannerImage  String?
    translations CategoryTranslation[]
}

model CategoryTranslation {
    id         String   @id @default(uuid())
    title      String
    lang       String
    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
    Product    Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId  String?

    @@unique([categoryId, lang])
}
